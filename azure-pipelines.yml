trigger:
- main
- feature-azure-pipelines

pool:
  vmImage: ubuntu-latest
  
jobs:
- job: build
  displayName: 'Build'
  steps:
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
        **/build/libs/testing-*.jar
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: appJar
      publishLocation: 'Container'

- job: sonar
  workspace:
    clean: all
  displayName:  Code Review
  steps:
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'Sonarcloud'
      organization: 'devops-foundation'
      projectKey: 'DevOps-Foundation_Microservicio-spring'
      projectName: 'testing-web'
    displayName: 'Preparing Sonarqube Environment'
    
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: "sonarqube"
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: true
      sqGradlePluginVersionChoice: 'specify'
      sonarQubeGradlePluginVersion: '3.3'
    displayName: 'Analyze current Branch'
    
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'
    displayName: 'Publish Analysis Results'

- job: buildimage
  displayName:  Build Image
  dependsOn: build
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'appJar'
      downloadPath: '$(Pipeline.Workspace)'

  - script: "mkdir -p build/libs; mv $(Pipeline.Workspace)/appJar/build/libs/ build/; chmod -R 555 build/libs"  
    displayName:  Se mueve jar a carpeta raiz

  
  - task: Docker@2
    inputs:
      containerRegistry: 'Docker-registry'
      command: 'login'
  - task: Docker@2
    inputs:
      repository: 'clagosu/microservicio-spring'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
           
- job: Deploy
  dependsOn: buildimage
  steps:
  - task: Kubernetes@1
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
      azureResourceGroup: 'aks-getting-started'
      kubernetesCluster: 'aks-getting-started'
      command: 'login'
    displayName:  Autenticacion cluster kubernetes
  #- task: Kubernetes@1
  #  inputs:
  #    connectionType: 'Azure Resource Manager'
  #    azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
  #    azureResourceGroup: 'aks-getting-started'
  #    kubernetesCluster: 'aks-getting-started'
  #    command: 'create'
  #    arguments: 'deployment demo --image=clagosu/microservicio-spring --dry-run -o=yaml > deployment.yaml'
  #    secretType: 'dockerRegistry'
  #    containerRegistryType: 'Azure Container Registry'
    
  #- task: Kubernetes@1
   # inputs:
    #  connectionType: 'Azure Resource Manager'
     # azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
     # azureResourceGroup: 'aks-getting-started'
     # kubernetesCluster: 'aks-getting-started'
     # command: 'create'
     # arguments: 'service clusterip demo --tcp=8080:8080 --dry-run -o=yaml >> deployment.yaml'
     # secretType: 'dockerRegistry'
     # containerRegistryType: 'Azure Container Registry'
  - task: KubernetesManifest@0
    inputs:
      action: 'createSecret'
      kubernetesServiceConnection: 'Azure-k8s'
      namespace: 'default'
      secretType: 'dockerRegistry'
      secretName: 'az-k8s-secret'
      dockerRegistryEndpoint: 'Docker-registry'
    displayName:  Integracion k8s y docker registry
  #- task: AzureCLI@2
   # inputs:
    #  azureSubscription: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
     # scriptType: 'bash'
      #scriptLocation: 'inlineScript'
      #inlineScript: 'az aks check-acr --name aks-getting-started --resource-group aks-getting-started --acr hub.docker.com'
      
  - task: Kubernetes@1
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'azure(9909fced-8203-44b6-af68-11f833a37e60)'
      azureResourceGroup: 'aks-getting-started'
      kubernetesCluster: 'aks-getting-started'
      command: 'apply'
      arguments: '-f kubernetes/public-scv.yaml'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'
    displayName:  Despliegue en cluster

- job: PerformanceTest
  dependsOn: Deploy
  steps:
  - task: JMeterInstaller@0
    inputs:
      jmeterVersion: '5.4.2'
  
  - task: TaurusInstaller@0
    inputs:
      taurusVersion: '1.15.3'
      pythonCommand: 'python3'

  - task: TaurusRunner@0
    inputs:
      taurusConfig: |
        execution:
        - scenario:
              script: jmeter/performance-test.jmx
      jmeterHome: '$(JMeterInstaller.JMeterHome)'
      jmeterPath: '$(JMeterInstaller.JMeterPath)'
      jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
      outputDir: 'taurus-output'